// 8)Iterate Set:

// Create a Set of strings.

// Use an Iterator to display all the elements.
import java.util.*;
import java.util.TreeSet;

public class SetIterator 
{
    public static void main(String[] args) 
    {
        Set<String> fruits = new HashSet<>();

        fruits.add("Mango");
        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Orange");
        fruits.add("Grapes");

        // Iterator banavala

        Iterator<String> iterator = fruits.iterator();

        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}
/*
Java рдореЗрдВ Iterator рдПрдХ generic interface рд╣реИред

Iterator<E>


рдпрд╣рд╛рдБ E рдорддрд▓рдм рд╣реИ тЖТ рд╡реЛ data type рдЬрд┐рд╕рдХреЗ elements рдЖрдк iterate рдХрд░ рд░рд╣реЗ рд╣реЛред

ЁЯФ╣ next() рдХрд╛ return type
E next()


ЁЯСЙ рдЗрд╕рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ next() рд╡рд╣реА type return рдХрд░реЗрдЧрд╛ рдЬреЛ collection (Set/List/Map keys, etc.) рдХрд╛ element type рд╣реИред

Example 1: String Set
Set<String> set = new HashSet<>();
Iterator<String> itr = set.iterator();

String value = itr.next();   // return type = String


ЁЯСЙ рдпрд╣рд╛рдБ next() String return рдХрд░реЗрдЧрд╛ред

Example 2: Integer List
List<Integer> list = new ArrayList<>();
Iterator<Integer> itr = list.iterator();

Integer num = itr.next();    // return type = Integer


ЁЯСЙ рдпрд╣рд╛рдБ next() Integer return рдХрд░реЗрдЧрд╛ред

тЬЕ Simple Rule:

Iterator<T> тЖТ next() рдХрд╛ return type рд╣рдореЗрд╢рд╛ T рд╣реЛрдЧрд╛ред
 */
